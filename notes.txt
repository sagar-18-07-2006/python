module is a file filled with special codes written by someone else and can be imported and directly used in your programm
pip is the keyword to install modules
 modules are of two types
Built in preinstalled 
external modules    need to install using pip 
we can use python as calculator 
enter python in terminal this open repl(read evalvulate print loop ')
import is the keyword to use  a module in a code
#(pound ) is for one liner comment 
"""             """   between those  everytthing will be commente d means multi line comment and  can alo be used to print multi line 
rule for having a name of avariable
a variable name can conatain  alphabets ,underscore and numbers
a variable name can only start with alphabets and undersvores
 no whitee spaces are allowed
 Data types 
 1 integer 
 2 float 
 3 strings 
 4 boolean 
 5 none
 
 by default input is type strings
 a**b  will multiply a b times
 ways to write a string 

 "anything between them in single line"
'anything between them in single line'
"""anything between them in multi line line"""
string is immutable
len(string) will give string size 
we can do by start 
0,1,2,3,4,5,6..
or from end 
-1,-2,-3,-4,-5,-6.......
slice string name
sl= name[ind_start:ind_end] start from ind_start excluding ind_end****important
if ind_start not mentioned it means it is 0
if ind_end is not mentioned it means it is length
skiping while slicing of n
a=n[1:7:3]
it will first consider slicing value from 1:7
then take first and 3rd value including the taken one 
write help("keywords") in terminal to get name of reserved keywords
x=4334;
print (id(x))
will give address in memory address of system where x uis stored 
if you change value of x address will changed 
     in print if you write 
     print("sagar",221,2112,4334,5454,sep='  ',end='\n\n\n')print("sagar",221,2112,4334,5454,sep='  ',end='\n\n\n')\
     by default print seperation between variable and end after  a print we can change
     Assignment operator
     =
     +=
     *=
     -=
     /=
     **= 
     //=
     %=
     logical operators
     and
     ip1 ip2 and op
     1   1   and  1
     1   0   and  0
     0   1   and  0
     0   0   and  0
     or
     ip1 ip2 and op
     1   1   and  1
     1   0   and  1
     0   1   and  1
     0   0   and  0
     not
     ip not op
     0  not  1
     1  not  0
   special operators
   in used to chechk something is in a variable or not
   name="sagar"
print(("r" in name))
give true
depends on small and large letter
juggling of words is not allowed

is
both the objeect are at a same memmmory location
id are same
of heap
if elif else

maintainn indentation 
otherwise errors will pop up
range function
range(start,stop,jump)
range(n) means only end and jumo is 1 
end is not included but start is included
list(range(a,b,c) will givee array of range)
we ccan have print(list(range(10,1,-1)))
to get [10, 9, 8, 7, 6, 5, 4, 3, 2]
for i in range(1,11):
    print(i,sep=', ')
range is always iterable 
whole loop once is iteration 
i is iterator
pass willl fill place in a loop not doing anything
string is a 
sequence of a chracter
  charachters can be 
  alphabet 
  0-9
  white spaces 
  special characters 
  A-Z
  65-90
  a-z
  97-122
  unicode characters
  ord give you uicode  value of function
  chr gives yu character associcated with a integer vvvvvvalue
  indexing in a strring
  start with 0 from start
  whitespaces are also counted 
  from end -1,-2,-3,-4,.....len will give length of a function
  
print(n[-1:-11:-1])
n[::] give same string
n[::-1] give reverse string 
gives 9876543210
where n = "01234567889" 
Strings methods 
capitalize make 1st letter to capital but not save in string 
title will capital every first letter of word   but not save in string 
if you want to change it in stribg 
st =st.title() you have to do like this 
upper convert all letters to upper characters
find it will  give you lowest index where that sub string is found if not found return -1
index it will  give you lowest index where that sub string is found if not found raise valueerror
replace change that sub string with new one 
split will create at whitespaces by default but we can change it to a sub string
isupper will give bollean reasponse true if all letters are capital
islowewr will give bollean reasponse true if all letters are not capital
isNUMERIC will give bollean reasponse true if all CHRACTERS ARE isNUMERIC foralpha numeric it give false
isalpha gives true if all values are alpha white spaces chracters are not allowed

formatting 
print("Hey my name is {} and my age is {}".format(name,age) )
.format {}(placeholder) ka sequence mien dalenge
print(f"Hey my name is {name} and my age is {age}" )
we can do like that too
 
 by + sign we can cotenate in one
 A set in Python is a built-in data structure that:

Stores only unique elements (no duplicates).

Is unordered.

Supports fast lookups and length queries.


data structureuse when data stored in a structure
organizing processing retrieving and storing data
name os students  
list /array  Are data structure
dicctionaries  Are data structure
sets   Are data structure
tupels  Are data structure
  Are data structure


  list
   ordered collectioin of data
   list are mutable 
   can contain multiple type of data
   list are iterable
   l=[46,989684,66,6,66,42,644]  pre defined list 
m=list()  name defined only
 iterable 
 mutable
 acssesible like an array 
 l[::]  give you same list 
 l[::-1] give you reverse list 
 list in built methods
count it will  give you total number  where that sub string is found
index it will  give you lowest index where that sub string is found if not found raise valueerror
pop deletes last element of a list
we can store that value in 
drop=name.pop()
Let's break down the code and explain step by step what it's doing:

---

for multi type list sorting


### ‚úÖ **Original List**:

```python
name = ["dgb656,", 244, True, False, 174786, "ss"]
```

This list contains **mixed data types**:

* Strings: `"dgb656,"`, `"ss"`
* Integers: `244`, `174786`
* Booleans: `True`, `False`

---

### ‚úÖ **Separate and Sort Strings**:

```python
strings = sorted([x for x in name if isinstance(x, str)])
```

This is a **list comprehension**:

* `x for x in name` ‚Äî loops over each element in `name`
* `if isinstance(x, str)` ‚Äî keeps only the strings
* `sorted(...)` ‚Äî sorts the resulting string list alphabetically

**Result**:

```python
strings = ['dgb656,', 'ss']
```

---

### ‚úÖ **Separate and Sort Numbers (int, float, bool)**:

```python
numbers = sorted([x for x in name if isinstance(x, (int, float, bool))])
```

This does the same as above, but filters for numbers:

* `isinstance(x, (int, float, bool))` ‚Äî keeps integers, floats, or booleans

**Note**: In Python, `bool` is a subclass of `int`:

* `False` behaves like `0`
* `True` behaves like `1`

**List before sorting**: `[244, True, False, 174786]`
Interpreted as: `[244, 1, 0, 174786]`
Sorted: `[False, True, 244, 174786]`

**Result**:

```python
numbers = [False, True, 244, 174786]
```

---

### ‚úÖ **Combine and Print**:

```python
for i in strings + numbers:
    print(i)
```

* `strings + numbers` ‚Äî combines the two lists
* `for i in ...: print(i)` ‚Äî prints each element on a new line

---

### ‚úÖ **Final Output**:

```
dgb656,
ss
False
True
244
174786
```

---

### üîÅ Summary:

* You split the mixed list into two: strings and numbers.
* You sorted each separately.
* Then you printed them in the order: strings first, numbers second.

Let me know if you want to reverse the order, format the output differently, or sort all as strings instead.


insert
list.insert(index,what you want to insert)
list.appened(wil add this thing to last of a list ) 
append ing a list give as single element 
so for taking it as a diffrent diffrent we ise extend 
tuple.python

tuples are immutable
frozen data once created not to change
The bool() function will always return True unless the variable is empty, 0, None or False.